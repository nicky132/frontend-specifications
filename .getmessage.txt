# <类型>:(影响范围) <主题> 

# <body>

# <footer>

# 类型字段包含:
#     feat：新功能（feature）
#     fix：修复bug
#     doc：文档（documentation）
#     style： 格式化 ESLint调整等（不影响代码运行的变动）
#     refactor：重构（即不是新增功能，也不是修改bug的代码变动）
#     test：增加测试
#     build: 影响构建系统或外部依赖项的更改(maven,gradle,npm 等等)
#     ci: 对CI配置文件和脚本的更改
#     chore：对非 src 和 test 目录的修改
#     revert: Revert a commit
# 影响范围（Scope）：
#     用于说明 commit 影响的范围，比如修改的登录页、账户中心页，提交涉及的模块、组件、文件等具体范围等
# 提交主题（Subject）：
#     commit目的的简短描述，简明扼要地描述本次提交的内容，避免使用过长或不清晰的描述，不超过50个字符
# 提交正文（Body）：
#     可选项，可以提供更详细的信息，是对本次 commit 的详细描述，如问题原因、解决方案等，可以分成多行
# 提交注释（Footer）：
#     可选项，用于关联问题跟踪系统（如JIRA）中的问题ID或其他相关信息，用来关闭 Issue或以BREAKING CHANGE开头，后面是对变动的描述、
#       以及变动理由和迁移方法

按照上述规范，一个典型的Git提交消息如下所示：
`
feat: 添加用户登录功能
 
- 添加用户登录页面
- 实现用户登录逻辑
- 增加用户登录验证
 
Issue-Id: #123
`